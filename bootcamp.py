from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging




math = {'–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 5',
        '–í–æ—Ä–æ–±—å–µ–≤' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 4',
        '–ò–≤–∞–Ω–æ–≤' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 4',
        '–ö—Ä—ã–ª–æ–≤–∞' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 3',
        '–í–∞—Å–∏–Ω' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 5',
        '–ì—Ä–∏–≥–æ—Ä—å–µ–≤' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 2',

        '–§—Ä–æ–ª–æ–≤–∞' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 5',
        '–ñ—É–∫–æ–≤' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 3',
        '–ê–Ω—Ç–æ–Ω–æ–≤–∞' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 4',
        '–ß—É—Ä–∏–ª–∫–∏–Ω–∞' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 2',
        '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 5',
        '–°–µ—Ä–≥–µ–µ–≤' : '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 3'}

rus = {'–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞' : '—Ä—É—Å—Å–∫–∏–π: 5',
       '–í–æ—Ä–æ–±—å–µ–≤': '—Ä—É—Å—Å–∫–∏–π: 2',
       '–ò–≤–∞–Ω–æ–≤': '—Ä—É—Å—Å–∫–∏–π: 4',
       '–ö—Ä—ã–ª–æ–≤–∞': '—Ä—É—Å—Å–∫–∏–π: 5',
       '–í–∞—Å–∏–Ω': '—Ä—É—Å—Å–∫–∏–π: 3',
       '–ì—Ä–∏–≥–æ—Ä—å–µ–≤': '—Ä—É—Å—Å–∫–∏–π: 4',

       '–§—Ä–æ–ª–æ–≤–∞': '—Ä—É—Å—Å–∫–∏–π: 3',
       '–ñ—É–∫–æ–≤': '—Ä—É—Å—Å–∫–∏–π: 4',
       '–ê–Ω—Ç–æ–Ω–æ–≤–∞': '—Ä—É—Å—Å–∫–∏–π: 5',
       '–ß—É—Ä–∏–ª–∫–∏–Ω–∞': '—Ä—É—Å—Å–∫–∏–π: 3',
       '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ': '—Ä—É—Å—Å–∫–∏–π: 4',
       '–°–µ—Ä–≥–µ–µ–≤': '—Ä—É—Å—Å–∫–∏–π: 5'}

inf = {'–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞' : '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 5',
       '–í–æ—Ä–æ–±—å–µ–≤': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 5',
       '–ò–≤–∞–Ω–æ–≤': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 5',
       '–ö—Ä—ã–ª–æ–≤–∞': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 4',
       '–í–∞—Å–∏–Ω': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 5',
       '–ì—Ä–∏–≥–æ—Ä—å–µ–≤': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 4',

       '–§—Ä–æ–ª–æ–≤–∞': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 5',
       '–ñ—É–∫–æ–≤': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 4',
       '–ê–Ω—Ç–æ–Ω–æ–≤–∞': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 5',
       '–ß—É—Ä–∏–ª–∫–∏–Ω–∞': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 4',
       '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 5',
       '–°–µ—Ä–≥–µ–µ–≤': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 5'}

A9 = {'/1 –ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞' : 1,
      '/2 –í–æ—Ä–æ–±—å–µ–≤' : 1,
      '/3 –ò–≤–∞–Ω–æ–≤' : 1,
      '/4 –ö—Ä—ã–ª–æ–≤–∞' : 1,
      '/5 –í–∞—Å–∏–Ω' : 1,
      '/6 –ì—Ä–∏–≥–æ—Ä—å–µ–≤' : 1}

B9 = {'/7 –§—Ä–æ–ª–æ–≤–∞': 1,
      '/8 –ñ—É–∫–æ–≤' : 1,
      '/9 –ê–Ω—Ç–æ–Ω–æ–≤–∞' : 1,
      '/10 –ß—É—Ä–∏–ª–∫–∏–Ω–∞' : 1,
      '/11 –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ' : 1,
      '/12 –°–µ—Ä–≥–µ–µ–≤' : 1,}


API = '6525277596:AAGbl0wSYl1CymNXhc6ZxsMpbL2Q-g_XJAQ'

#–∫–ª–∞—Å—Å –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Student(StatesGroup):
    STUDENT = State()
    USER_INPUT = State()
class Subject(StatesGroup):
    SUBJECT = State()



#–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–ø—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
storage = MemoryStorage()

bot = Bot(token=API)
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['remand'])
async def remand(message: types.Message):
    await Student.USER_INPUT.set()
    chat_id = message.chat.id
    await bot.send_message(chat_id=chat_id, text='–≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞:')

@dp.message_handler(state=Student.USER_INPUT)
async def input(message: types.Message, state: FSMContext):
    user_text = message.text
    chat_id = message.chat.id
    if user_text == '–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞':
        math.pop('–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞')
        rus.pop('–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞')
        inf.pop('–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–í–æ—Ä–æ–±—å–µ–≤':
        math.pop('–í–æ—Ä–æ–±—å–µ–≤')
        rus.pop('–í–æ—Ä–æ–±—å–µ–≤')
        inf.pop('–í–æ—Ä–æ–±—å–µ–≤')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–ò–≤–∞–Ω–æ–≤':
        math.pop('–ò–≤–∞–Ω–æ–≤')
        rus.pop('–ò–≤–∞–Ω–æ–≤')
        inf.pop('–ò–≤–∞–Ω–æ–≤')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–ö—Ä—ã–ª–æ–≤–∞':
        math.pop('–ö—Ä—ã–ª–æ–≤–∞')
        rus.pop('–ö—Ä—ã–ª–æ–≤–∞')
        inf.pop('–ö—Ä—ã–ª–æ–≤–∞')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–í–∞—Å–∏–Ω':
        math.pop('–í–∞—Å–∏–Ω')
        rus.pop('–í–∞—Å–∏–Ω')
        inf.pop('–í–∞—Å–∏–Ω')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–ì—Ä–∏–≥–æ—Ä—å–µ–≤':
        math.pop('–ì—Ä–∏–≥–æ—Ä—å–µ–≤')
        rus.pop('–ì—Ä–∏–≥–æ—Ä—å–µ–≤')
        inf.pop('–ì—Ä–∏–≥–æ—Ä—å–µ–≤')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')

    elif user_text == '–§—Ä–æ–ª–æ–≤–∞':
        math.pop('–§—Ä–æ–ª–æ–≤–∞')
        rus.pop('–§—Ä–æ–ª–æ–≤–∞')
        inf.pop('–§—Ä–æ–ª–æ–≤–∞')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–ñ—É–∫–æ–≤':
        math.pop('–ñ—É–∫–æ–≤')
        rus.pop('–ñ—É–∫–æ–≤')
        inf.pop('–ñ—É–∫–æ–≤')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–ê–Ω—Ç–æ–Ω–æ–≤–∞':
        math.pop('–ê–Ω—Ç–æ–Ω–æ–≤–∞')
        rus.pop('–ê–Ω—Ç–æ–Ω–æ–≤–∞')
        inf.pop('–ê–Ω—Ç–æ–Ω–æ–≤–∞')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–ß—É—Ä–∏–ª–∫–∏–Ω–∞':
        math.pop('–ß—É—Ä–∏–ª–∫–∏–Ω–∞')
        rus.pop('–ß—É—Ä–∏–ª–∫–∏–Ω–∞')
        inf.pop('–ß—É—Ä–∏–ª–∫–∏–Ω–∞')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ':
        math.pop('–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ')
        rus.pop('–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ')
        inf.pop('–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')
    elif user_text == '–°–µ—Ä–≥–µ–µ–≤':
        math.pop('–°–µ—Ä–≥–µ–µ–≤')
        rus.pop('–°–µ—Ä–≥–µ–µ–≤')
        inf.pop('–°–µ—Ä–≥–µ–µ–≤')
        await state.finish()
        await bot.send_message(chat_id, text='—É—á–µ–Ω–∏–∫ –æ—Ç—á–∏—Å–ª–µ–Ω, –∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º')

    else:
        await bot.send_message(chat_id, text='—Ç–∞–∫–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö')


@dp.message_handler(commands=['start'])

async def start(message: types.Message):
    chat_id = message.chat.id
#—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text='9–∞üòú', callback_data='but1')
    button2 = types.InlineKeyboardButton(text='9–±ü§ë', callback_data='but2')
    keyboard.add(button1, button2)
    await bot.send_message(chat_id=chat_id, text='–≤—ã–±–µ—Ä–µ—Ç–µ –∫–ª–∞—Å—Å:', reply_markup=keyboard)


async def menu1(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_text = '–≤—ã–±–µ—Ä–µ—Ç–µ —É—á–µ–Ω–∏–∫–∞ 9a –∫–ª–∞—Å—Å–∞:\n'
    for s, j in A9.items():
        a = s.split()
        id_s = a[0]
        s = a[1]
        user_text += id_s + ' ' + s + '\n'

    await bot.send_message(chat_id=chat_id, text=user_text)

async def menu2(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_text = '–≤—ã–±–µ—Ä–µ—Ç–µ —É—á–µ–Ω–∏–∫–∞ 9–± –∫–ª–∞—Å—Å–∞:\n'
    for s, j in B9.items():
        a = s.split()
        id_s = a[0]
        s = a[1]
        user_text += id_s + ' ' + s + '\n'

    await bot.send_message(chat_id=chat_id, text=user_text)


@dp.callback_query_handler()
async def student(callback_data: types.CallbackQuery):
    data = callback_data.data
    if data == 'but1':

        await menu1(callback_data)
        await Student.STUDENT.set()
    elif data == 'but2':

        await menu2(callback_data)
        await Student.STUDENT.set()


@dp.message_handler(state=Student.STUDENT)
async def student(message: types.Message, state: FSMContext):
    number = message.text
    chat_id = message.chat.id
    if number == '/1':
        try:
            num1 = math.get('–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞')
            num2 = rus.get('–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞')
            num3 = inf.get('–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/2':
        try:
            num1 = math.get('–í–æ—Ä–æ–±—å–µ–≤')
            num2 = rus.get('–í–æ—Ä–æ–±—å–µ–≤')
            num3 = inf.get('–í–æ—Ä–æ–±—å–µ–≤')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')


    elif number == '/3':
        try:
            num1 = math.get('–ò–≤–∞–Ω–æ–≤')
            num2 = rus.get('–ò–≤–∞–Ω–æ–≤')
            num3 = inf.get('–ò–≤–∞–Ω–æ–≤')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/4':
        try:
            num1 = math.get('–ö—Ä—ã–ª–æ–≤–∞')
            num2 = rus.get('–ö—Ä—ã–ª–æ–≤–∞')
            num3 = inf.get('–ö—Ä—ã–ª–æ–≤–∞')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/5':
        try:
            num1 = math.get('–í–∞—Å–∏–Ω')
            num2 = rus.get('–í–∞—Å–∏–Ω')
            num3 = inf.get('–í–∞—Å–∏–Ω')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/6':
        try:
            num1 = math.get('–ì—Ä–∏–≥–æ—Ä—å–µ–≤')
            num2 = rus.get('–ì—Ä–∏–≥–æ—Ä—å–µ–≤')
            num3 = inf.get('–ì—Ä–∏–≥–æ—Ä—å–µ–≤')
            await state.finish()
            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/7':
        try:
            num1 = math.get('–§—Ä–æ–ª–æ–≤–∞')
            num2 = rus.get('–§—Ä–æ–ª–æ–≤–∞')
            num3 = inf.get('–§—Ä–æ–ª–æ–≤–∞')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/8':
        try:
            num1 = math.get('–ñ—É–∫–æ–≤')
            num2 = rus.get('–ñ—É–∫–æ–≤')
            num3 = inf.get('–ñ—É–∫–æ–≤')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/9':
        try:
            num1 = math.get('–ê–Ω—Ç–æ–Ω–æ–≤–∞')
            num2 = rus.get('–ê–Ω—Ç–æ–Ω–æ–≤–∞')
            num3 = inf.get('–ê–Ω—Ç–æ–Ω–æ–≤–∞')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/10':
        try:
            num1 = math.get('–ß—É—Ä–∏–ª–∫–∏–Ω–∞')
            num2 = rus.get('–ß—É—Ä–∏–ª–∫–∏–Ω–∞')
            num3 = inf.get('–ß—É—Ä–∏–ª–∫–∏–Ω–∞')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/11':
        try:
            num1 = math.get('–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ')
            num2 = rus.get('–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ')
            num3 = inf.get('–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ')

            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')

    elif number == '/12':
        try:
            num1 = math.get('–°–µ—Ä–≥–µ–µ–≤')
            num2 = rus.get('–°–µ—Ä–≥–µ–µ–≤')
            num3 = inf.get('–°–µ—Ä–≥–µ–µ–≤')
            await state.finish()
            await bot.send_message(chat_id=chat_id, text=num1)
            await bot.send_message(chat_id=chat_id, text=num2)
            await bot.send_message(chat_id=chat_id, text=num3)
        except Exception as Ex:
            await bot.send_message(chat_id=chat_id, text='–æ—Ç—á–∏—Å–ª–µ–Ω')





if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
